class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

    def __repr__(self):
        return f'{self.value}'


class LnkdLst:
    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def __repr__(self):
        result = ''
        current_node = self.head
        while current_node:
            result += str(current_node)
            if current_node.next:
                result += ' -> '
            current_node = current_node.next
        return result

    def __len__(self):
        return self.length

    def __getitem__(self, item):
        lst = []
        current_node = self.head

        while current_node:
            lst.append(current_node)
            current_node = current_node.next
        return lst[item]

    def append(self, value):
        new_node = Node(value)
        if self.tail:
            current_node = self.tail
            current_node.next = new_node
            self.tail = new_node
        else:
            self.head = new_node
            self.tail = new_node
        self.length += 1

    def insert(self, target, value):
        new_node = Node(value)
        if 0 <= target <= self.length:
            if self.length == 0:
                self.head = new_node
                self.tail = new_node
            elif target == self.length:
                self.append(value)
                self.length -= 1
            elif target == 0:
                current_node = self.head
                new_node.next = current_node
                self.head = new_node
            else:
                current_node = self.head
                idx = 1
                while current_node and target > idx:
                    current_node = current_node.next
                    idx += 1
                new_node.next = current_node.next
                current_node.next = new_node
            self.length += 1

    def traversal(self):
        current_node = self.head
        while current_node:
            print(current_node)
            current_node = current_node.next

    def search_by_value(self, value):
        current_node = self.head
        temp_node = None
        found = False
        if self.length > 0:
            while current_node and not found:
                if current_node.value == value:
                    found = True
                    temp_node = current_node
                current_node = current_node.next
        return found, temp_node

    def get_by_value(self, value):
        result = self.search_by_value(value)
        if result[0]:
            return result[1]

    def set_by_value(self, value, new_value):
        result = self.search_by_value(value)
        if result[0]:
            temp_value = self.get_by_value(value)
            temp_value.value = new_value

    def remove_by_value(self, value):
        current_node = self.head
        prev_node = None
        target_node = None
        result = self.search_by_value(value)
        if result[0]:
            while current_node:
                if result[1] is self.head:
                    self.head = current_node.next
                    del current_node
                    return
                elif current_node.value == value:
                    target_node = current_node
                    break
                prev_node = current_node
                current_node = current_node.next
            del current_node
            prev_node.next = target_node.next
            self.length -= 1

    def get_by_index(self, target):
        current_node = self.head
        if 0 <= target < self.length:
            idx = 0
            while current_node and target != idx:
                current_node = current_node.next
                idx += 1
            return current_node

    def pop(self):
        current_node = self.head
        prev_node = None
        while current_node.next:
            prev_node = current_node
            current_node = current_node.next
        self.tail = prev_node
        prev_node.next = None
        self.length -= 1
        return current_node
